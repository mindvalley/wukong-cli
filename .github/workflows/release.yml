name: release

on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+*"

env:
  CARGO_TERM_COLOR: always
  CICD_INTERMEDIATES_DIR: "_cicd-intermediates"

jobs:
  tag-name:
    name: Get Version Name
    runs-on: ubuntu-latest
    outputs:
      wukong_version: ${{ env.WUKONG_VERSION }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        if: env.WUKONG_VERSION == ''
        run: |
          TAG_NAME=${{ github.ref }}
          echo "WUKONG_VERSION=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV
          echo "version is: ${{ env.WUKONG_VERSION }}"

  build-release:
    name: ${{ matrix.job.name }} (${{ matrix.job.target }})
    needs: [tag-name]
    strategy:
      fail-fast: false
      matrix:
        rust: [ stable ]
        job:
          - { name: "macOS-arm",      target: aarch64-apple-darwin          , os: ubuntu-latest }
          - { name: "macOS-x86",      target: x86_64-apple-darwin           , os: ubuntu-latest }
          - { name: "linux-x86",  target: x86_64-unknown-linux-gnu      , os: ubuntu-latest }
          # - { target: x86_64-unknown-linux-musl     , os: ubuntu-22.04, use-cross: true }
          # - { target: x86_64-unknown-linux-musl     , os: ubuntu-22.04, use-cross: true }
          # - { target: x86_64-unknown-linux-gnu    , os: ubuntu-22.04, use-cross: true }
          # - { target: x86_64-apple-darwin         , os: macos-latest                  }
          # - { target: aarch64-unknown-linux-gnu   , os: ubuntu-22.04, use-cross: true }
          # - { target: arm-unknown-linux-gnueabihf , os: ubuntu-22.04, use-cross: true }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-22.04, use-cross: true }
          # - { target: i686-unknown-linux-gnu      , os: ubuntu-22.04, use-cross: true }
          # - { target: i686-unknown-linux-musl     , os: ubuntu-22.04, use-cross: true }
    runs-on: ${{ matrix.job.os }}
    permissions:
      contents: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.job.target }}
          components: rustfmt, clippy
          override: true

      - name: Install macOS packages
        uses: mbround18/setup-osxcross@v1
        if: contains(matrix.job.target, 'apple-darwin')
        with:
          osx-version: "12.3"

      - name: Install Linux packages
        if: contains(matrix.job.target, 'linux')
        shell: bash
        run: |
          case ${{ matrix.job.target }} in
            arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
            aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
          esac

      - name: Set env
        shell: bash
        run: | 
          case ${{ matrix.job.target }} in
            aarch64-apple-darwin) 
              LINKER_FILE="aarch64-apple-darwin21.4-clang"
              AR_FILE="aarch64-apple-darwin21.4-ar"
              echo "CARGO_TARGET_AARCH64_APPLE_DARWIN_LINKER=${LINKER_FILE}" >> $GITHUB_ENV
              echo "CARGO_TARGET_AARCH64_APPLE_DARWIN_RUSTFLAGS=-Car=${AR_FILE},-Clink-arg=-undefined,-Clink-arg=dynamic_lookup" >> $GITHUB_ENV
              echo "TARGET_CC=${LINKER_FILE}" >> $GITHUB_ENV
              echo "TARGET_AR=${AR_FILE}" >> $GITHUB_ENV
              ;;
            x86_64-apple-darwin) 
              LINKER_FILE="x86_64-apple-darwin21.4-clang"
              AR_FILE="x86_64-apple-darwin21.4-ar"
              echo "TARGET_CC=${LINKER_FILE}" >> $GITHUB_ENV
              echo "TARGET_AR=${AR_FILE}" >> $GITHUB_ENV
              ;;
          esac

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      - name: Build Wukong CLI
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.job.target }}

      - name: Create tarball
        id: package
        shell: bash
        run: |
          PKG_suffix=".tar.gz" ; case ${{ matrix.job.target }} in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          PKG_BASENAME=${PROJECT_NAME}-v${{ needs.tag-name.outputs.wukong_version }}-${{ matrix.job.name }}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          echo ::set-output name=PKG_NAME::${PKG_NAME}
          BIN_NAME="${{ env.PROJECT_NAME }}"
          PKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/package"
          ARCHIVE_DIR="${PKG_STAGING}/${PKG_BASENAME}/"
          mkdir -p "${ARCHIVE_DIR}"
          mkdir -p "${ARCHIVE_DIR}/autocomplete"
          # Binary
          cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "$ARCHIVE_DIR"

          # base compressed package
          pushd "${PKG_STAGING}/" >/dev/null
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
            *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
          esac;
          popd >/dev/null
          # Let subsequent steps know where to find the compressed package
          echo ::set-output name=PKG_PATH::"${PKG_STAGING}/${PKG_NAME}"

      - name: "Artifact upload: tarball"
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.package.outputs.PKG_NAME }}
          path: ${{ steps.package.outputs.PKG_PATH }}
          retention-days: 1

  publish:
    needs: [build-release]
    runs-on: ubuntu-latest
    env:
      GH_REPO: ${{ github.repository }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    permissions:
      contents: write
    steps:
      # Must perform checkout first, since it deletes the target directory
      # before running, and would therefore delete the downloaded artifacts
      - uses: actions/checkout@v3

      - uses: actions/download-artifact@v3
        with:
          path: ./artifacts

      - name: Display structure of downloaded files
        run: ls -R
        working-directory: ./artifacts

      - name: Set TAG_NAME
        run: |
          TAG_NAME=${{ github.ref }}
          echo "TAG_NAME=${TAG_NAME#refs/tags/}" >> $GITHUB_ENV

      - run: echo 'PRERELEASE=' >> $GITHUB_ENV

      - if: |
          contains(env.TAG_NAME, 'dev') ||
          contains(env.TAG_NAME, 'alpha') ||
          contains(env.TAG_NAME, 'beta') ||
          contains(env.TAG_NAME, 'nightly')
        run: |
          echo 'PRERELEASE=--prerelease' >> $GITHUB_ENV

      - name: Publish release
        env:
          DEBUG: api
        run: |
          gh release create $TAG_NAME $PRERELEASE --title "$TAG_NAME" --target $GITHUB_SHA ./artifacts/*/*.tar.gz
