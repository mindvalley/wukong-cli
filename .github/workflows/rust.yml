name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  ci:
    strategy:
      matrix:
        job:
          - { target: aarch64-apple-darwin        , os: ubuntu-22.04, use-cross: true }
          # - { target: x86_64-apple-darwin         , os: macos-latest                  }
          # - { target: aarch64-unknown-linux-gnu   , os: ubuntu-22.04, use-cross: true }
          # - { target: arm-unknown-linux-gnueabihf , os: ubuntu-22.04, use-cross: true }
          # - { target: arm-unknown-linux-musleabihf, os: ubuntu-22.04, use-cross: true }
          # - { target: i686-unknown-linux-gnu      , os: ubuntu-22.04, use-cross: true }
          # - { target: i686-unknown-linux-musl     , os: ubuntu-22.04, use-cross: true }
          # - { target: x86_64-unknown-linux-gnu    , os: ubuntu-22.04, use-cross: true }
          # - { target: x86_64-unknown-linux-musl   , os: ubuntu-22.04, use-cross: true }
        rust: [ stable ]
    name: ${{ matrix.job.target }} (${{ matrix.job.os }})
    runs-on: ${{ matrix.job.os }}

    steps:
      # - uses: hecrj/setup-rust-action@v1
      #   with:
      #     rust-version: ${{ matrix.rust }}
      #     target: ${{ matrix.job.target }}
      #     override: true
      #     profile: minimal # minimal component installation (ie, no documentation)
      #     components: rustfmt, clippy
      - uses: actions/checkout@v3

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true
          target: ${{ matrix.job.target }}
          components: rustfmt, clippy

      # - name: Install prerequisites
      #   shell: bash
      #   run: |
      #     case ${{ matrix.job.target }} in
      #       arm-unknown-linux-*) sudo apt-get -y update ; sudo apt-get -y install gcc-arm-linux-gnueabihf ;;
      #       aarch64-unknown-linux-gnu) sudo apt-get -y update ; sudo apt-get -y install gcc-aarch64-linux-gnu ;;
      #     esac

      - name: Extract crate information
        shell: bash
        run: |
          echo "PROJECT_NAME=$(sed -n 's/^name = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' Cargo.toml | head -n1)" >> $GITHUB_ENV
          echo "PROJECT_MAINTAINER=$(sed -n 's/^authors = \["\(.*\)"\]/\1/p' Cargo.toml)" >> $GITHUB_ENV
          echo "PROJECT_HOMEPAGE=$(sed -n 's/^homepage = "\(.*\)"/\1/p' Cargo.toml)" >> $GITHUB_ENV

      - name: Build Wukong CLI
        uses: actions-rs/cargo@v1
        with:
          use-cross: ${{ matrix.job.use-cross }}
          command: build
          args: --locked --release --target=${{ matrix.job.target }}

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Check clippy
        uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

      - name: Test Wukong CLI
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --verbose

      - name: Create tarball
        id: package
        shell: bash
        run: |
          PKG_suffix=".tar.gz" ; case ${{ matrix.job.target }} in *-pc-windows-*) PKG_suffix=".zip" ;; esac;
          PKG_BASENAME=${PROJECT_NAME}-v${PROJECT_VERSION}-${{ matrix.job.target }}
          PKG_NAME=${PKG_BASENAME}${PKG_suffix}
          echo ::set-output name=PKG_NAME::${PKG_NAME}
          BIN_NAME="${{ env.PROJECT_NAME }}"
          PKG_STAGING="${{ env.CICD_INTERMEDIATES_DIR }}/package"
          ARCHIVE_DIR="target/${{ matrix.job.target }}/release/${BIN_NAME}"
          mkdir -p "${ARCHIVE_DIR}"
          mkdir -p "${ARCHIVE_DIR}/autocomplete"
          # Binary
          cp "target/${{ matrix.job.target }}/release/${BIN_NAME}" "$ARCHIVE_DIR"

          # base compressed package
          pushd "${PKG_STAGING}/" >/dev/null
          case ${{ matrix.job.target }} in
            *-pc-windows-*) 7z -y a "${PKG_NAME}" "${PKG_BASENAME}"/* | tail -2 ;;
            *) tar czf "${PKG_NAME}" "${PKG_BASENAME}"/* ;;
          esac;
          popd >/dev/null
          # Let subsequent steps know where to find the compressed package
          echo ::set-output name=PKG_PATH::"${PKG_STAGING}/${PKG_NAME}"

          
      - name: "Artifact upload: tarball"
        uses: actions/upload-artifact@master
        with:
          name: ${{ steps.package.outputs.PKG_NAME }}
          path: ${{ steps.package.outputs.PKG_PATH }}

      # - name: Package
      #   working-directory: ${{github.workspace}}/install
      #   run: |
      #     mv bin wukong
      #     tar -czvf wukong.tar.gz ${PACKAGE_NAME}

      # - name: Upload Artifacts
      #   uses: actions/upload-artifact@v2
      #   with:
      #       name: ${{env.PACKAGE_NAME}}
      #       path: ${{github.workspace}}/install/${{env.PACKAGE_NAME}}.tar.gz
